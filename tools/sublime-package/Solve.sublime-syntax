%YAML 1.2

---

name: Solve
file_extensions: [slv]
fileTypes: [slv]
scope: source.slv

variables:
  ident: "[a-zA-Z_][a-zA-Z0-9_]*'*"

  # numbers
  decimal: '\b[0-9]+(\.[0-9]*)?\b'
  binary: '\b0b[0-1]+\b'
  octal: '\b0c[0-7]+\b'
  hexadecimal: '\b0x[0-9a-fA-F]+\b'
  number: '{{decimal}}|{{binary}}|{{octal}}|{{hexadecimal}}'

contexts:
  prototype:
    - include: comments

  main:
    - include: comments
    - include: declaration

    - include: invalids



  expression:
    - include: comments

    - include: declaration

    - include: operator
    - include: number
    - include: call
    - include: variable


  declaration:

    # variables
    - match: '({{ident}})\s*(=)'
      captures:
        1: entity.name.function.slv
        2: keyword.definition.variable.slv
      push: expression

    # functions
    - match: '({{ident}})\s*(\()(?=.*\)\s*=)'
      captures:
        1: entity.name.function.slv
        2: punctuation.section.parens.begin.slv

      embed: scope:source.slv-params
      embed_scope: meta.parameters.slv

      escape: (\))\s*(=)?
      escape_captures:
        1: punctuation.section.parens.end.slv
        2: keyword.definition.function.slv
      push: expression


  operator:
    - match: ==|/=
      scope: keyword.operator.comparison.slv
    - match: <=|>=|<>|<|>
      scope: keyword.operator.relational.slv
    # - match: \!|&&|\|\||\?\?|:|\?|\^\^
    #   scope: keyword.operator.logical.slv
    # - match: \&|\^|\|
    #   scope: keyword.operator.bitwise.slv
    # - match: --
    #   scope: keyword.operator.decrement.slv
    # - match: \+\+
    #   scope: keyword.operator.increment.slv
    - match: \*|/|-|\+
      scope: keyword.operator.arithmetic.slv

  number:
    - match: \b{{number}}\b
      scope: constant.numeric.slv

  call:
    - match: '({{ident}})\s*(\()(?!.*\)\s*=)'
      captures:
        1: variable.function.slv
        2: punctuation.section.arguments.begin.slv
      push:
        - include: comments
        - match: \)
          scope: punctuation.section.arguments.end.slv
          pop: true
        - include: expression
        - include: invalids

  variable:
    - match: '({{ident}})'
      scope: variable.other.slv


  invalids:
    - match: \S
      scope: invalid.misplaced.slv

  comments:
    - match: ';;'
      scope: punctuation.definition.comment.slv
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.slv
        - match: ';;'
          pop: true

    - match: ';'
      scope: punctuation.definition.comment.slv
      push:
        - meta_scope: comment.line.slv
        - match: $\n?
          pop: true
